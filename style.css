body{
  background: #333;
  padding: 5px;
}

#container {
  /*General container styling to distinguish between grid elements...Sizing to make it look decent on a full web page*/
  background: #333;
  color: #fff;
  min-width: 500px;
  min-height: 700px;
  max-width: 1080px;
  max-height: 1080px;
  margin: auto;

  /*Main Grid*/
  /*Declar the container you want as a grid*/
  display: grid;

  /*Set up the grid template/structure*/
  grid-template-columns: 1fr 2fr 1fr;
  grid-auto-rows: minmax(100px, auto); /*this can also read grid-template-rows: 1fr 2fr -- repeat(3 1fr), etc., or use an auto sizing as indicated here*/

  /*Next, pick what children span which grid template areas*/
  /*This is literally set up like the grid, with words -- the "." is used to display a blank grid cell/item (pushes other grid cells out)*/
  grid-template-areas: 
  "navbar navbar navbar"
  "sidebar bodytext bodytext"
  "sidebar photos photos"
  "footer footer footer";

/*Setting a grid gap makes it look nice on the page*/
  grid-gap: 10px;

  /*Start to align items (up and down) and justify content (side to side)*/
  justify-content: space-evenly;
}

/*Then, you will need to nest any grids, like in the navbar, and repeat a similar process*/
#element1 {
  grid-area: navbar;
  display: grid;
  grid-template-columns: 200px 1fr 200px;
  align-items: center;
}
#element1 ul {
  text-align: center;  
}
#element1 ul li {
  list-style-type: none;
  padding: 0px 10px 0px 10px;
  display: inline-block;
}
#element1, button {
  text-align:right;
  padding-right: 20px;
}
#element1 h1{
  text-align:left;
  padding-left: 10px;

}

#element2{
  grid-area: bodytext;
}
#element3{
  grid-area: photos;
}

#element4{
  grid-area: sidebar;
}

#element5{
  grid-area: footer;
}












#element1, #element2, #element3, #element4, #element5 {
  background: #1aF;
  padding: 5px;
}

body{
  margin: 5px;
  
}